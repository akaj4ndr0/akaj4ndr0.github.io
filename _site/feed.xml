<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-01-28T09:07:58+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">CiberBlog</title><subtitle>Blog de ciberseguridad</subtitle><author><name>Javier Gonzalez</name></author><entry><title type="html">Scripting en Python I - argparse</title><link href="http://localhost:4000/pythonI-argparse/" rel="alternate" type="text/html" title="Scripting en Python I - argparse" /><published>2022-01-24T00:00:00+01:00</published><updated>2022-01-24T00:00:00+01:00</updated><id>http://localhost:4000/pythonI-argparse</id><content type="html" xml:base="http://localhost:4000/pythonI-argparse/">&lt;h2 id=&quot;python3---argparse&quot;&gt;Python3 - argparse&lt;/h2&gt;

&lt;p&gt;Este post pretende ser una introducción al módulo &lt;strong&gt;argparse&lt;/strong&gt; de Python. El módulo argparse viene por defecto cuando se instala Python e incluye herramientas para
construir procesadores de argumentos y opciones de línea de comando.&lt;/p&gt;

&lt;p&gt;Para poder usar argparse lo primero que hay que hacer es importar el módulo: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import argparse&lt;/code&gt;. Ahora podemos trabajar con este módulo, y lo primero que vamos a hacer es
crear un objeto:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python3&lt;/span&gt;

import argparse

parser &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; argparse.ArgumentParser&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ArgumentParser admite varios argumentos en formato clave:valor; algunos de ellos son:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;description&lt;/strong&gt;, texto que se mostrará antes de la ayuda del argumento.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;epilog&lt;/strong&gt;, texto que se mostrará después de la ayuda del argumento.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pongamos algunos ejemplos.&lt;/p&gt;

&lt;p&gt;Supongamos que queremos hacer una breve descripción de la función que realiza nuestro script (argumento con clave description), y mostrar al final de la ayuda un ejemplo de uso (argumento con clave epilog).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python3&lt;/span&gt;

import argparse

parser &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; argparse.ArgumentParser&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Escaner de puertos&quot;&lt;/span&gt;,epilog&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Ejemplo de uso: python3 ejemplo_argparse.py --target 127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ahora ejecutamos nuestro script: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3 ejemplo_argparse.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/python/argparse/argumentParser.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Por defecto, ArgumentParser agrega una opción que simplemente muestra el mensaje de ayuda, -h y –help.&lt;/p&gt;

&lt;p&gt;Otra forma más interesante de usar el argumento epilog de ArgumentParser es asignándole el valor de una variable creada previamente. Imaginemos que queremos mostrar varios ejemplos
de uso de nuestra herramienta. Para ello declaramos una variable llamada epilogo y le asignamos el texto que queremos que se muestre al final de la ayuda.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python3&lt;/span&gt;

import argparse

epilogo &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'''Ejemplo de uso de la herramienta

	+ Visualizar la ayuda:

		python3 ejemplo_argparse.py --help

	+ Escano básico:

		python3 ejemplo_argparse.py --target 127.0.0.1

	+ Escanear varios puertos:

		python3 ejemplo_argparse.py -target 127.0.0.1 -p 80,443,8080'''&lt;/span&gt;

parser &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; argparse.ArgumentParser&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Escaner de puertos&quot;&lt;/span&gt;,epilog&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;epilogo,formatter_class&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;argparse.RawDescriptionHelpFormatter&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Analicemos el códgio:&lt;/p&gt;

&lt;p&gt;Hemos declarado la variable &lt;strong&gt;epilogo&lt;/strong&gt; después de importar el módulo, y le hemos asignado el texto que queremos asignar al argumento con clave epilog de ArgumentParser.&lt;/p&gt;

&lt;p&gt;Para formatear la salida y tener más control sobre cómo se muestran las descripciones textuales usamos el argumento &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;formatter_class=argparser.RawDescriptionHelpFormatter&lt;/code&gt;, de lo contrario
se mostraría todo en una línea.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/python/argparse/epilog.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Otros argumentos que permite ArgumentParser son:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;prog&lt;/strong&gt;, determina el nombre del programa.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;usage&lt;/strong&gt;, texto que describe como se usa el programa.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;add_help&lt;/strong&gt;, agregar la opción -h / –help al analizador (por defecto es True).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;agregando-argumentos&quot;&gt;Agregando argumentos&lt;/h3&gt;

&lt;p&gt;Para añadir argumentos a nuestro script usamos el método &lt;strong&gt;add_argument()&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Existen dos tipos de argumentos:&lt;strong&gt; posicionales&lt;/strong&gt; y &lt;strong&gt;opcionales&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Si declaramos un argumento posicional, es obligatorio usarlo cuando ejecutamos nuestro script.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python3&lt;/span&gt;

import argparse

epilogo &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'''Ejemplo de uso de la herramienta

	+ Visualizar la ayuda:

		python3 ejemplo_argparse.py --help

	+ Escano básico:

		python3 ejemplo_argparse.py --target 127.0.0.1

	+ Escanear varios puertos:

		python3 ejemplo_argparse.py --target 127.0.0.1 -p 80,443,8080

'''&lt;/span&gt;

parser &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; argparse.ArgumentParser&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Escaner de puertos&quot;&lt;/span&gt;,epilog&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;epilogo,formatter_class&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;argparse.RawDescriptionHelpFormatter&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

parser.add_argument&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

params &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; parser.parse_args&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;params.target&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/python/argparse/posicional.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos lanza un error porque no establecimos el argumento target. Ahora ejecutamos el script pasándole un objetivo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/python/argparse/posicional2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como se aprecia en la imagen el script se ejecutó sin errores y mostró el objetivo.&lt;/p&gt;

&lt;p&gt;Los argumentos opcionales son aquellos que se declaran precedidos de la flag - o –. Como su propio nombre indica, son opcionales a la hora de ejecutar el script.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python3&lt;/span&gt;

import argparse

epilogo &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'''Ejemplo de uso de la herramienta

	+ Visualizar la ayuda:

		python3 ejemplo_argparse.py --help

	+ Escano básico:

		python3 ejemplo_argparse.py --target 127.0.0.1

	+ Escanear varios puertos:

		python3 ejemplo_argparse.py --target 127.0.0.1 -p 80,443,8080

'''&lt;/span&gt;

parser &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; argparse.ArgumentParser&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Escaner de puertos&quot;&lt;/span&gt;,epilog&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;epilogo,formatter_class&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;argparse.RawDescriptionHelpFormatter&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

parser.add_argument&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-t&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

params &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; parser.parse_args&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;params.t&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Si ejecutamos el script sin usar el argumento -t, el script no lanzará ningún error, ya que este argumento es opcional.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/python/argparse/opcional.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/python/argparse/opcional2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;También podemos especificar el argumento usando las flags - y – al mismo tiempo. En este caso, para imprimir el valor del argumento, usaremos el nombre de la flag –, ya sea usando - o – cuando ejecutemos el script.
Vamos a verlo.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python3&lt;/span&gt;

import argparse

epilogo &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'''Ejemplo de uso de la herramienta

	+ Visualizar la ayuda:

		python3 ejemplo_argparse.py --help

	+ Escano básico:

		python3 ejemplo_argparse.py --target 127.0.0.1

	+ Escanear varios puertos:

		python3 ejemplo_argparse.py --target 127.0.0.1 -p 80,443,8080

'''&lt;/span&gt;

parser &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; argparse.ArgumentParser&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Escaner de puertos&quot;&lt;/span&gt;,epilog&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;epilogo,formatter_class&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;argparse.RawDescriptionHelpFormatter&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

parser.add_argument&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-t&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;--target&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

params &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; parser.parse_args&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;params.target&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aquí vemos que podemos llamar al argumento con la versión corta -t o la versión larga –target. En la función print() usamos params.target independientemente de como ejecutemos el script.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/python/argparse/dobleflag.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al igual que ArgumentParser(), add_argument() también admite unos atributos mediante clave:valor para trabajar con los argumentos. Algunos de ellos son:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;action&lt;/strong&gt;, la acción que se realizará cuando se encuentre este argumento en la línea de comandos. Las acciones que puede tomar el argumento son:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;store&lt;/strong&gt;, es la opción por defecto, almacena el valor del argumento.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;store_const&lt;/strong&gt;, almacena el valor de la palabra clave const.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;store_true y store_false&lt;/strong&gt;, para almacenar los valores de True y False respectivamente.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;append&lt;/strong&gt;, almacena una lista y agrega cada valor del argumento a la lista. El siguiene script muestra por pantalla los  puertos
agregados a una lista mediante &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;action=&quot;append&quot;&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python3&lt;/span&gt;

import argparse

epilogo &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'''Ejemplo de uso de la herramienta

	+ Visualizar la ayuda:

		python3 ejemplo_argparse.py --help

	+ Escano básico:

		python3 ejemplo_argparse.py --target 127.0.0.1

	+ Escanear varios puertos:

		python3 ejemplo_argparse.py --target 127.0.0.1 -p 80,443,8080

'''&lt;/span&gt;

parser &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; argparse.ArgumentParser&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Escaner de puertos&quot;&lt;/span&gt;,epilog&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;epilogo,formatter_class&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;argparse.RawDescriptionHelpFormatter&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

parser.add_argument&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-p&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;--ports&quot;&lt;/span&gt;,action&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;append&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

params &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; parser.parse_args&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;port &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;params.ports:

	print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   parser &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; argparse.ArgumentParser&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Escaner de puertos&quot;&lt;/span&gt;,epilog&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;epilogo,formatter_class&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;argparse.RawDescriptionHelpFormatter&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

   parser.add_argument&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-p&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;--ports&quot;&lt;/span&gt;,action&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;append&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

   params &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; parser.parse_args&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;port &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;params.ports:

	print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Al llamar varias veces al argumento -p o –ports se crea una lista de puertos que se muestran por consola.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/python/argparse/action_append.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;count&lt;/strong&gt;, cuenta el número de veces que ocurre un argumento&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En el siguiente script podemos ver un ejemplo de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;action=&quot;count&quot;&lt;/code&gt;, que muestra por pantalla el nivel de verbosidad elegido.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python3&lt;/span&gt;

import argparse

epilogo &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'''Ejemplo de uso de la herramienta

	+ Visualizar la ayuda:

		python3 ejemplo_argparse.py --help

	+ Escano básico:

		python3 ejemplo_argparse.py --target 127.0.0.1

	+ Escanear varios puertos:

		python3 ejemplo_argparse.py --target 127.0.0.1 -p 80,443,8080

'''&lt;/span&gt;

parser &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; argparse.ArgumentParser&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Escaner de puertos&quot;&lt;/span&gt;,epilog&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;epilogo,formatter_class&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;argparse.RawDescriptionHelpFormatter&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

parser.add_argument&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-v&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;--verbosity&quot;&lt;/span&gt;,action&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;count&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

params &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; parser.parse_args&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;params.verbosity&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/python/argparse/action_verbosidad.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;nargs&lt;/strong&gt;, número de argumentos que deben de aparecer en la línea de comandos. Estos argumentos se agregan a una lista.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;nargs=”?”, indica que el argumento puede tener cero o un valor.&lt;/li&gt;
      &lt;li&gt;nargs=”*”, indica que el argumento puede tener cero o más valores.&lt;/li&gt;
      &lt;li&gt;nargs=”+”, indica que el argumento debe tener al menos un valor.&lt;/li&gt;
      &lt;li&gt;nargs=N, indica el número de valores que ha de tener el argumento, donde N es un número entero.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Veamos algunos ejemplos:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script con nargs=”?”&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python3&lt;/span&gt;

import argparse

epilogo &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'''Ejemplo de uso de la herramienta

	+ Visualizar la ayuda:

		python3 ejemplo_argparse.py --help

	+ Escano básico:

		python3 ejemplo_argparse.py --target 127.0.0.1

	+ Escanear varios puertos:

		python3 ejemplo_argparse.py --target 127.0.0.1 -p 80,443,8080

'''&lt;/span&gt;

parser &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; argparse.ArgumentParser&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Escaner de puertos&quot;&lt;/span&gt;,epilog&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;epilogo,formatter_class&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;argparse.RawDescriptionHelpFormatter&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

parser.add_argument&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--target&quot;&lt;/span&gt;,nargs&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;?&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

params &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; parser.parse_args&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;params.target&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Aquí introducimos un concepto nuevo, atributo con clave &lt;strong&gt;default&lt;/strong&gt;. Esto significa que si no se especifica el parámetro –target, por defecto el valor será el que
asignemos a la clave &lt;strong&gt;default&lt;/strong&gt;. Si se especifica el argumento en la línea de comandos se asignará el valor pasado.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/python/argparse/nargs_interrogacion.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/python/argparse/nargs_interrogacion2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script con nargs=”*”&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python3&lt;/span&gt;

import argparse

epilogo &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'''Ejemplo de uso de la herramienta

	+ Visualizar la ayuda:

		python3 ejemplo_argparse.py --help

	+ Escano básico:

		python3 ejemplo_argparse.py --target 127.0.0.1

	+ Escanear varios puertos:

		python3 ejemplo_argparse.py --target 127.0.0.1 -p 80,443,8080

'''&lt;/span&gt;

parser &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; argparse.ArgumentParser&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Escaner de puertos&quot;&lt;/span&gt;,epilog&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;epilogo,formatter_class&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;argparse.RawDescriptionHelpFormatter&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

parser.add_argument&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--target&quot;&lt;/span&gt;,nargs&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;,default&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

params &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; parser.parse_args&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;target &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;params.target:

	print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Recordemos que en este caso podemos asignar cero o varios argumentos. Si se ñade más de un argumento los datos se guardarán en una lista. Si no se pasa ninǵun argumento
por defecto mostrará el valor pasado en el atributo con clave default.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/python/argparse/nargs_asterisco.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script con nargs=”+”.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python3&lt;/span&gt;

import argparse

epilogo &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'''Ejemplo de uso de la herramienta

	+ Visualizar la ayuda:

		python3 ejemplo_argparse.py --help

	+ Escano básico:

		python3 ejemplo_argparse.py --target 127.0.0.1

	+ Escanear varios puertos:

		python3 ejemplo_argparse.py --target 127.0.0.1 -p 80,443,8080

'''&lt;/span&gt;

parser &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; argparse.ArgumentParser&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Escaner de puertos&quot;&lt;/span&gt;,epilog&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;epilogo,formatter_class&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;argparse.RawDescriptionHelpFormatter&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

parser.add_argument&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--target&quot;&lt;/span&gt;,nargs&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;+&quot;&lt;/span&gt;,default&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;227.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

params &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; parser.parse_args&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/python/argparse/nargs_suma.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;El script lanza un mensaje de error avisando que no se especificó al menos un argumento.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script con nargs=N&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python3&lt;/span&gt;

import argparse

epilogo &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'''Ejemplo de uso de la herramienta

	+ Visualizar la ayuda:

		python3 ejemplo_argparse.py --help

	+ Escano básico:

		python3 ejemplo_argparse.py --target 127.0.0.1

	+ Escanear varios puertos:

		python3 ejemplo_argparse.py --target 127.0.0.1 -p 80,443,8080

'''&lt;/span&gt;

parser &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; argparse.ArgumentParser&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Escaner de puertos&quot;&lt;/span&gt;,epilog&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;epilogo,formatter_class&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;argparse.RawDescriptionHelpFormatter&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

parser.add_argument&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--target&quot;&lt;/span&gt;,nargs&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

params &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; parser.parse_args&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/python/argparse/nargs_suma.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;El script muestra un mensaje de error si no se indican dos argumentos.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;const&lt;/strong&gt;, valor constante que se le asignará al argumento.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;default&lt;/strong&gt;, valor que tendrá el argumento si no se especifica en la línea de comandos.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;, por defecto los argumentos son cadenas, podemos especificar que el valor del argumento sea un int o float por ejemplo.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;choices&lt;/strong&gt;, es un contenedor de valores permitidos en el argumento.&lt;br /&gt;
Cuando usamos el atributo &lt;strong&gt;choices&lt;/strong&gt; los argumentos de la línea de comando deben seleccionarse de un conjunto restringido de valores.
En el siguiente script indicamos qué niveles de verbosidad puede tener el argumento. En este caso 1, 2 o 3.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python3&lt;/span&gt;

import argparse

epilogo &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'''Ejemplo de uso de la herramienta

	+ Visualizar la ayuda:

		python3 ejemplo_argparse.py --help

	+ Escano básico:

		python3 ejemplo_argparse.py --target 127.0.0.1

	+ Escanear varios puertos:

		python3 ejemplo_argparse.py --target 127.0.0.1 -p 80,443,8080

'''&lt;/span&gt;

parser &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; argparse.ArgumentParser&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Escaner de puertos&quot;&lt;/span&gt;,epilog&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;epilogo,formatter_class&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;argparse.RawDescriptionHelpFormatter&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

parser.add_argument&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--verbosity&quot;&lt;/span&gt;,choices&lt;span class=&quot;o&quot;&gt;=[&lt;/span&gt;1,2,3],type&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;int,default&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

params &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; parser.parse_args&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;params.verbosity&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;../assets/images/python/argparse/choices.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si el argumento no coincide con los valores establecidos en el atributo &lt;strong&gt;choices&lt;/strong&gt; el script muestra un mensaje de error.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;required&lt;/strong&gt;, permite indicar si el argumento es obligatorio. Por defecto es False.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;help&lt;/strong&gt;, para mostrar una ayuda de lo que hace el argumento.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;metavar&lt;/strong&gt;, para indicar el nombre del argumento en los mensajes de ayuda.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;dest&lt;/strong&gt;, para indicar el nombre del destino donde se guardará el del argumento.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Repasemos todo lo anterior mediante la creación de un script con ejemplos de lo que hemos visto. El siguiente script pretender ser una herramienta para escanear puertos abiertos de un host.
Para ello utilizaremos el módulo argparse para definir que argumentos requiere el programa y como analizarlos.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python3 # Establece el intérprete&lt;/span&gt;

import argparse &lt;span class=&quot;c&quot;&gt;# Importamos el módulo argparse&lt;/span&gt;

epilogo &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'''Ejemplo de uso de la herramienta

	+ Visualizar la ayuda:

		python3 ejemplo_argparse.py --help

	+ Escano básico:

		python3 ejemplo_argparse.py --target 127.0.0.1

	+ Escanear varios puertos:

		python3 ejemplo_argparse.py --target 127.0.0.1 -p 80,443,445 -verbosity 2

'''&lt;/span&gt;

parser &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; argparse.ArgumentParser&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Herramienta para escanear puertos&quot;&lt;/span&gt;,epilog&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;epilogo,formatter_class&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;argparse.RawDescriptionHelpFormatter,usage&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;python3 ejemplo_argparse.py -t host&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;''' 
	Argumento para establecer el host a escanear. 
	Es un argumento obligatorio. 
	En el atributo dest indicamos donde se almacena el argumento, en este caso en host.
	Con metavar indicamos el nombre del argumento en el mensaje de uso.
'''&lt;/span&gt;
parser.add_argument&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-t&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;--target&quot;&lt;/span&gt;,dest&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;host&quot;&lt;/span&gt;,metavar&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;host&quot;&lt;/span&gt;,required&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;True,help&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Host a escanear: -t/--target 192.168.1.15&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;'''
	Argumento para establecer los puertos a escanear.
	Es un argumento opcional, si no se indica, se establece por defecto los puertos 80 y 8080.
'''&lt;/span&gt;
parser.add_argument&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-p&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;--port&quot;&lt;/span&gt;,default&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;80,8080&quot;&lt;/span&gt;,help&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Puertos a escanear: -p/--port 80,443,445. Por defecto 80,8080&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;'''
	Argumento para indicar el nivel de verbosidad.
	Por defecto es 1.
	El atributo choices indica que se puede elegir un nivel de verbosidad entre 1 y 3.
	Se indica que el argumento es de tipo int.
'''&lt;/span&gt;
parser.add_argument&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--verbosity&quot;&lt;/span&gt;,choices&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;range&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1,4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,default&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1,type&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;int,help&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Elige nivel de verbosidad: --verbosity 1. Por defecto el nivel es 1.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;s1&quot;&gt;'''
	Argumento para establecer un escaneo rápido.
	Si el argumento aparece en la línea de comandos, se almacena el valor True.
	Según se indica en el atributo con clave dest, el valor se almacena en fast.
'''&lt;/span&gt;
parser.add_argument&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-sF&quot;&lt;/span&gt;,dest&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fast&quot;&lt;/span&gt;,action&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;store_true&quot;&lt;/span&gt;,help&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Establece un escaneo rápido&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

params &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; parser.parse_args&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;El host a escanear es %s&quot;&lt;/span&gt; % params.host&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

puertos &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; params.port.split&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;port &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;puertos:

	print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Escanear puerto %s&quot;&lt;/span&gt; % port&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;params.verbosity &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 1:

	print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;El nivel de verbosidad es 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;k&quot;&gt;elif &lt;/span&gt;params.verbosity &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 2:

	print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;El nivel de verbosidad es 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;:

	print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;El nivel de verbosidad es 3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Si se indica el argumento -sF desde la línea de comandos se realizará un escaneo rápido.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;params.fast &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; True:

	print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Se ha seleccionado un escaneo rápido&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/python/argparse/script_final.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para quien esté interesado en profundizar más sobre este módulo os recomiendo visitar &lt;a href=&quot;https://docs.python.org/3/library/argparse.html&quot;&gt;https://docs.python.org/3/library/argparse.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hasta la próxima.&lt;/p&gt;</content><author><name>Javier Gonzalez</name></author><summary type="html">Módulo argparse Python3.</summary></entry><entry><title type="html">Que no te lo cuenten. OWASP</title><link href="http://localhost:4000/quenotelocuenOwasp/" rel="alternate" type="text/html" title="Que no te lo cuenten. OWASP" /><published>2022-01-23T00:00:00+01:00</published><updated>2022-01-23T00:00:00+01:00</updated><id>http://localhost:4000/quenotelocuenOwasp</id><content type="html" xml:base="http://localhost:4000/quenotelocuenOwasp/">&lt;h2 id=&quot;-qué-es-el-proyecto-owasp-&quot;&gt;¿ Qué es el proyecto OWASP ?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;OWASP&lt;/strong&gt; (Open Web Application Security Proyect), es un proyecto abierto de seguridad de aplicaciones Web. La comunidad OWASP está formada por empresas, organizaciones educativas y
particulares de todo el mundo. Proporciona una base para probar los controles técnicos de seguridad de las aplicaciones Web.&lt;/p&gt;

&lt;p&gt;OWASP establece y explica las diez vulnerabilidades más importantes que pueden aparecer en un sitio web a través de un documento concocido como el OWASP Top Ten. Su útlima versión es la de 2021, la cual
ha establecido una serie de cambios respecto a su anterior versión de 2017. La siguiente imagen muestra los cambios introducidos en la versión de 2021.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/owasp.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si quieres saber más sobre este proyecto visita la página de la fundación &lt;a href=&quot;https://owasp.org/&quot;&gt;Owasp&lt;/a&gt;.&lt;/p&gt;</content><author><name>Javier Gonzalez</name></author><summary type="html">¿Qué es OWASP? Open Web Application Security Proyect.</summary></entry><entry><title type="html">Burp Suite</title><link href="http://localhost:4000/burpsuite/" rel="alternate" type="text/html" title="Burp Suite" /><published>2022-01-07T00:00:00+01:00</published><updated>2022-01-07T00:00:00+01:00</updated><id>http://localhost:4000/burpsuite</id><content type="html" xml:base="http://localhost:4000/burpsuite/">&lt;h2 id=&quot;-qué-es-burp-suite-&quot;&gt;¿ Qué es Burp Suite ?&lt;/h2&gt;

&lt;p&gt;Burp Suite es considerada la navaja suiza del pentester. Es una herramienta utilizada en auditorías de seguridad de aplicaciones Web. Un proxy de interceptación
para el análisis y edición del tráfico Web. Con Burp Suite se pueden interceptar las peticiones y respuestas, leerlas y editarlas en tiempo real antes de que lleguen
a su destino final.&lt;/p&gt;

&lt;p&gt;Burp Suite se encuentra desarrollado y soportado por la empresa PortSwigger LTD. Existe una versión gratuita (Community Edition) y una de pago (Professional Edition).
Kali Linux trae por defecto la versión gratuita de Burp Suite. Si aún no tienes instalado Kali puedes seguir los pasos de instalación en este &lt;a href=&quot;../laboratorio&quot;&gt;enlace&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configuración-inicial-burp-suite&quot;&gt;Configuración inicial Burp Suite&lt;/h2&gt;

&lt;p&gt;Puedes abrir Burp desde la terminal con el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;burpsuite&lt;/code&gt;. Una vez iniciado asegúrate de que el proxy esté escuchando en el puerto &lt;strong&gt;8080&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/burpsuite/proxy.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Te recomiendo que instales la extensión &lt;a href=&quot;https://addons.mozilla.org/es/firefox/addon/foxyproxy-standard/&quot;&gt;FoxyProxy&lt;/a&gt; para Firefox. Esta extensión te permite configurar el proxy del navegador de una forma más rápida.&lt;/p&gt;

&lt;p&gt;Una vez instalada, abre la extensión y sigue estos pasos para configurar el proxy de tal forma que las peticiones pasen por Burp Suite.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/burpsuite/foxyproxy1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/burpsuite/foxyproxy3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/burpsuite/foxyproxy4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora puedes activar o desactivar el proxy Burp Suite desde la extensión cuando quieras.&lt;/p&gt;

&lt;p&gt;Otro paso importante es instalar en el navegador el certificado de Burp Suite (Firefox). Para ello escribe la siguiente direccion en el navegador &lt;a href=&quot;http://burpsuite/&quot;&gt;http://burpsuite/&lt;/a&gt; con el proxy activado.&lt;/p&gt;

&lt;p&gt;Descarga el certificado y sigue los siguientes pasos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/burpsuite/proxy2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En ajustes del navegador, busca los certificados instalados.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/burpsuite/proxy3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Elige la opción importar y selecciona el fichero con extensión .der descargado.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/burpsuite/proxy4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/burpsuite/proxy5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Marca las dos casillas de la ventana emergente y pulsa ok.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/burpsuite/proxy6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;¡Bien hecho!. Ya tienes configurado Burp Suite para dar los primeros pasos, vamos a ello.&lt;/p&gt;

&lt;p&gt;Cada vez que inicies Burp Suite, el Intercept del proxy está en ON, esto significa que si quieres navegar por la página web tendrás que hacer click en Forward para que la petición llegue a su destino
y continuar la navegación. Puedes desactivar el Intercept y navegar por la Web y activarlo cuando quieras ver o editar la petición.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/burpsuite/intercept_on.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Otra opción interesante es la pestaña HTTP history de proxy, la cual muestra el historial de las peticiones.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/burpsuite/history_proxy.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Es recomendable asignar el Scope en la pestaña Target de Burp Suite.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/burpsuite/target.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Esto evitará a que se muestre en el historial las peticiones que no estén dentro del Scope a analizar.&lt;/p&gt;

&lt;p&gt;Cuando le des a aceptar se mostrará una ventana emergente. Dale a YES para que Burp no registre otras URLs distintas al objetivo en el historial.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/burpsuite/target2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hasta aquí una primera visión de Burp Suite. En próximos artículos iremos viendo que opciones nos trae esta herramienta imprescindible para auditorías Web.&lt;/p&gt;

&lt;p&gt;Hasta la próxima.&lt;/p&gt;</content><author><name>Javier Gonzalez</name></author><summary type="html">Burp Suite, la navaja suiza del pentester.</summary></entry><entry><title type="html">Nmap y pa’ dentro</title><link href="http://localhost:4000/nmap/" rel="alternate" type="text/html" title="Nmap y pa’ dentro" /><published>2022-01-01T00:00:00+01:00</published><updated>2022-01-01T00:00:00+01:00</updated><id>http://localhost:4000/nmap</id><content type="html" xml:base="http://localhost:4000/nmap/">&lt;h2 id=&quot;-qué-es-nmap-&quot;&gt;¿ Qué es Nmap ?&lt;/h2&gt;

&lt;p&gt;Namp (Network Mapper) es una herramienta gratuita y multiplataforma para mapear redes en busca hosts activos, puertos abiertos y servicios corriendo.
Nmap viene instalado por defecto en Kali Linux.&lt;/p&gt;

&lt;h2 id=&quot;port-scanner&quot;&gt;Port Scanner&lt;/h2&gt;

&lt;p&gt;Como hemos mencionado, con Nmap podemos ver que puertos están abiertos en un determinado host, y ver que servicios se están ejecutando.
Existen un total de 65536 puertos, que van desde el 0 al 65535. Los puertos que van desde el 0 al 1023 son los puertos bien conocidos (en inglés, well-known ports).
Existe un estándar de asignación de puertos que los divide en tres grupos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;0 - 1023. Están reservados para el sisteman operativo y los protocolos más importantes. Por ejemplo 21 FTP, 22 SSH, 80 HTTP.&lt;/li&gt;
  &lt;li&gt;1024 - 49151. Son los puertos registrados, los que se utilizan por las aplicaciones que se instalan en el ordenador.&lt;/li&gt;
  &lt;li&gt;49152 - 65535. Son los puertos dinámicos o privados, los que corresponden a las aplicaciones que necesitan conectarse a un servidor.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ejemplos-prácticos-con-nmap&quot;&gt;Ejemplos prácticos con Nmap&lt;/h2&gt;

&lt;p&gt;Nmap puede identificar los dispositivos en una red, detectar el sistema opertativo de un host, y determinar que servicios se están ejecutando. Aquí vamos a centrarnos en descubrir qué
puertos y servicios se están ejecutando en la máquina vulnerable Metasploitable2. Si aún no has creado el laboratorio de pruebas, te dejo este &lt;a href=&quot;../laboratorio&quot;&gt;enlace&lt;/a&gt; para crearlo paso a paso.&lt;/p&gt;

&lt;p&gt;Ejecuta el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip a&lt;/code&gt; o &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt; desde la terminal en cada una de las máquinas para ver la dirección IP asignada.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/nmap/ip-kali.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/nmap/ip-metasploitable.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora tenemos las IPs de nuestras máquinas, en mi caso la 10.0.2.15 para Kali y la 10.0.2.5 para Metasploitable2.&lt;/p&gt;

&lt;p&gt;El escaneo más básico para el reconocimiento de puertos con nmap es el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap ip_objetivo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/nmap/nmap-basic.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos observar en la parte inferior derecha el tiempo que tomó nmap para el escaneo de puertos: 13.09s. Ahora bien, con el parámetro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-n&lt;/code&gt; de nmap podemos reducir el tiempo de scaneo. Este parámetro hace
que nmap no realice resolución DNS lo que reduce bastante el tiempo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/nmap/nmap-n.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;De forma predeterminada nmap solo escanea los 1000 puertos más comunes para cada protocolo. Con el parámetro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p&lt;/code&gt; podemos indicar qué puertos queremos escanear separados por coma. Para indicar que queremos escanear todos los puertos
podemor ejecutar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap -n -p- ip_objetivo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/nmap/nmap-allports.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para ver las versiones de los servicios que se están ejecutando usamos el parámetro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-sV&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/nmap/nmap-versiones.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora Nmap muestra otra columna “VERSION”, con información de las versiones de los servicios. Esta información es muy valiosa para ver versiones vulnerables de los servicos que se ejecutan.&lt;/p&gt;

&lt;p&gt;Podemos guardar los resultados del scaneo para tenerlos siempre a mano y no tener que volver a ejecutar nmap sobre el host objetivo. Nmap puede guardar la salida del comando en varios formatos,
seguido del nombre del archivo de salida.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Salida normal (-oN).&lt;/li&gt;
  &lt;li&gt;Salida XML (-oX).&lt;/li&gt;
  &lt;li&gt;Salida grepeable (-oG).&lt;/li&gt;
  &lt;li&gt;Salida en todos los formatos (-oA).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nmap tiene una infinidad de opciones que aquí no os he mostrado. Si quieres seguir investigando sobre esta herramienta te dejo por aquí el enlace a su página oficial, &lt;a href=&quot;https://nmap.org/&quot;&gt;nmap&lt;/a&gt;.&lt;/p&gt;</content><author><name>Javier Gonzalez</name></author><summary type="html">Uso y ejemplos de la herramienta Nmap</summary></entry><entry><title type="html">Que no te lo cuenten. Ataque Zero-Day</title><link href="http://localhost:4000/quenotelocuentem2/" rel="alternate" type="text/html" title="Que no te lo cuenten. Ataque Zero-Day" /><published>2022-01-01T00:00:00+01:00</published><updated>2022-01-01T00:00:00+01:00</updated><id>http://localhost:4000/quenotelocuentem2</id><content type="html" xml:base="http://localhost:4000/quenotelocuentem2/">&lt;h2 id=&quot;-qué-es-un-ataque-zero-day-&quot;&gt;¿ Qué es un ataque Zero-Day ?&lt;/h2&gt;

&lt;p&gt;Un &lt;strong&gt; Ataque Zero-Day&lt;/strong&gt; es un ciberataque contra una aplicación o sistema que tiene como objetivo la ejecución de código
malicioso gracias al conocimiento de una vulnerabilidad desconocida por el fabricante del producto; lo que supone que
el fabricante del producto aún no ha corregido dicha vulnerabilidad.&lt;/p&gt;

&lt;p&gt;Stuxnet es uno de los ejemplos más famosos de un ataque de día cero (Zero-Day). Se descubrió por primera vez en 2010. Este gusano informático malicioso
fue famoso porque atacó los equipos digitales que controlan la producción de uranio enriquecido, usado para crear armas nucleares.&lt;/p&gt;</content><author><name>Javier Gonzalez</name></author><summary type="html">¿Qué es un ataque Zero-Day?. Que no te lo cuenten.</summary></entry><entry><title type="html">Configuración del laboratorio de pruebas</title><link href="http://localhost:4000/laboratorio/" rel="alternate" type="text/html" title="Configuración del laboratorio de pruebas" /><published>2021-12-25T00:00:00+01:00</published><updated>2021-12-25T00:00:00+01:00</updated><id>http://localhost:4000/laboratorio</id><content type="html" xml:base="http://localhost:4000/laboratorio/">&lt;h2 id=&quot;instalación-de-virtual-box&quot;&gt;Instalación de Virtual Box&lt;/h2&gt;

&lt;p&gt;El primer paso para crear nuestro laboratorio es descargarnos &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;Virtual Box&lt;/a&gt;, un software de virtualización para crear máquinas virtuales
con instalaciones de sistemas operativos. Esto quiere decir que si tienes un ordenador con Windows, por ejemplo, puedes crear una máquina virtual con cualquier otro sistema operativo
sin necesidad de crear particiones en tu propio equipo.&lt;/p&gt;

&lt;p&gt;Una vez instalado, sigues estos pasos para configurar una red NAT, que usaremos en las máquinas virtuales que instalaremos más adelante. En el menú archivo de Virtual Box, elige Preferencias, y en la opción Red crear una nueva red NAT.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/preferencias.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/crear-red.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&quot;descarga-la-imagen-kali&quot;&gt;Descarga la imagen Kali&lt;/h2&gt;

&lt;p&gt;Kali Linux es una distribución basada en Debian GNU/Linux diseñada especialmente para la auditoría y seguridad informática. Desde la página oficial de &lt;a href=&quot;https://www.kali.org/get-kali/#kali-bare-metal&quot;&gt;Kali-Linux&lt;/a&gt; descarga el instalador de kali eligiendo la opción Bare Metal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/laboratorio/instalador-kali.png&quot; alt=&quot;instalador&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/laboratorio/instalador-kali2.png&quot; alt=&quot;instalador&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;instalación-de-la-máquina-virtual-kali&quot;&gt;Instalación de la máquina virtual Kali&lt;/h2&gt;

&lt;p&gt;Una vez instalado Virtual Box y descargada la imagen de Kali, vamos a instalar Kali en nuestro equipo.
Ejecuta el software de virtualización Virtual Box y elige la pestaña &lt;strong&gt;&lt;i&gt;Nueva&lt;/i&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A continuación da un nombre a tu máquina virtual, escribe Linux en la opción Tipo, y elige la versión de Debian (64-bit).&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali2.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Elige la cantidad de memoria RAM reservada para la máquina virtual según las características de tu equipo anfitrión.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali3.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Deja las siguientes opciones por defecto.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali4.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali5.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali6.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;A continuación asigna el espacio del disco duro virtual que tendrá la máquina.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali7.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Ahora vamos a configurar algunos aspectos de la máquina virtual.&lt;/p&gt;

&lt;p&gt;En la pestaña &lt;strong&gt;&lt;i&gt; Configuración &lt;/i&gt;&lt;/strong&gt; haz click sobre &lt;strong&gt;&lt;i&gt; Sistema &lt;/i&gt;&lt;/strong&gt; y desmarca la casilla &lt;strong&gt;&lt;i&gt;Disquete&lt;/i&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali8.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;En la pestaña &lt;strong&gt;&lt;i&gt; Procesador &lt;/i&gt;&lt;/strong&gt; elige el número de procesadores según las características de tu equipo anfitrión.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali9.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;A continuación en la opción &lt;strong&gt;&lt;i&gt; Almacenamiento &lt;/i&gt;&lt;/strong&gt; haz click sobre el icono del CD y selecciona el disco virtual óptico en la ruta de descarga de la imagen iso de Kali.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali10.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Una vez configurada la máquina haz click sobre la pestaña &lt;strong&gt;&lt;i&gt; Iniciar &lt;/i&gt;&lt;/strong&gt; y comenzará la instalación de Kali.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali11.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali12.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Selecciona el idioma y la ubicación.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali13.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali14.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Asigna un nombre a la máquina.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali15.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Deja la siguiente casilla en blanco.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali16.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Escribe el nombre completo del usuario.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali17.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Y escribe el nombre del usuario para la nueva cuenta y asignale una contraseña.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali18.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali19.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Las siguiente opciones déjalas por defecto.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali20.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali21.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali22.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali23.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali24.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Marca la opción &lt;strong&gt;&lt;i&gt;Sí&lt;/i&gt;&lt;/strong&gt; y dale a continuar.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali25.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;En la siguiene panatalla deja todas las opciones por defecto y dale a continuar.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali26.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Ahora marca la opción &lt;strong&gt;&lt;i&gt;Sí&lt;/i&gt;&lt;/strong&gt; y continúa con la instalación.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali27.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;A continuación marca la segunda opción.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali28.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Dale a continuar y la instalación se habrá completado.&lt;/p&gt;

&lt;p&gt;Inicia sesión con el usuario de la nueva cuenta y la contraseña asignada.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali30.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;¡¡¡Ya tienes Kali Linux instalado en tu equipo!!!&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali31.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Para poder compartir el portapapeles y poder arrastrar y soltar entre el equipo anfitrión y la máquina virtualizada haz lo siguiente.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali32.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/maquinakali33.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;No te olvides de configurar el adaptador de red de la máquina. Para ello apaga la máquina y desde el menú configuración, en red selecciona la opción red NAT y como nombre la que creamos en el paso
de instalación de Virtuabl Box.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/asignar-red.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&quot;instalación-de-la-máquina-metasploitable&quot;&gt;Instalación de la máquina Metasploitable&lt;/h2&gt;

&lt;p&gt;Metasploitable es una máquina virtual Linux creada intencionalmente vulnerable. Esta máquina virtual se puede utilizar para probar herramientas
de seguridad y practicar hacking de modo seguro. Puedes descargar la máquina desde este &lt;a href=&quot;https://sourceforge.net/projects/metasploitable/files/Metasploitable2/&quot;&gt;enlace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Una vez descargado, descomprime el archivo y abre el software de virtualización Virtual Box. Haz click sobre la pestaña &lt;strong&gt;&lt;i&gt;Nueva&lt;/i&gt;&lt;/strong&gt; y asígnale un nombre
a la máquina virtual. Elige Linux en la opción Tipo y como versión elige Other Linux (64-bit).&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/metasploitable1.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Asigna la memoria RAM según las características de tu equipo anfitrión.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/metasploitable2.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Ahora selecciona la opción “Usar un archivo de disco duro virtual existente” y haz click sobre el icono carpeta.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/metasploitable3.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Añade el archivo con extensión .vmdk que encontrarás en la ruta donde descomprimistes el archivo .zip de metasploitable2.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/metasploitable4.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Ahora ya puedes iniciar la máquina, el usuario y contraseña para acceder es &lt;strong&gt;&lt;i&gt;msfadmin&lt;/i&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&quot;../assets/images/laboratorio/metasploitable6.png&quot; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;¡¡¡ Hemos acabado !!! Ya tienes un laboratorio para realizar pruebas de seguridad y hacer Hacking de forma segura.&lt;/p&gt;

&lt;p&gt;Configura el adaptador de red como hicimos en la máquina Kali.&lt;/p&gt;</content><author><name>Javier Gonzalez</name></author><summary type="html">En esta sección encontrarás todo lo necesario para crear un laboratorio para pruebas de pentesting.</summary></entry><entry><title type="html">Programa #Include</title><link href="http://localhost:4000/include/" rel="alternate" type="text/html" title="Programa #Include" /><published>2021-12-16T00:00:00+01:00</published><updated>2021-12-16T00:00:00+01:00</updated><id>http://localhost:4000/include</id><content type="html" xml:base="http://localhost:4000/include/">&lt;h2 id=&quot;la-fundación-goodjob&quot;&gt;La Fundación GoodJob&lt;/h2&gt;

&lt;p&gt;La Fundación GoodJob desarrolla el Programa #Include con el objetivo de formar en seguridad informática a personas con discapacidad.
Se trata de un programa de empleabilidad gratuito, que se desarrolla de forma online, destinado a desarrollar competencias en el sector de la ciberseguridad, 
una de las profesiones más innovadoras y con más demanda de empleo en la actualidad.&lt;/p&gt;

&lt;p&gt;El Programa #Include cuenta con la colaboración de varias instituciones:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;El Instituto Nacional de Ciberseguridad&lt;/li&gt;
  &lt;li&gt;El Centro Criptológico Nacional&lt;/li&gt;
  &lt;li&gt;La Comunidad de Madrid&lt;/li&gt;
  &lt;li&gt;La Generalitat de Catalunya&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La primera edición del programa se realizó entre Mayo y Junio de 2020, y hasta la fecha se han realizado cuatro ediciones.
El programa ha sido un éxito rotundo, consiguiento integrar a más del 80% de los alumnos en empresas colaboradoras, entre las que se incluyen Atos, Telefónica, s21sec, entre otras.&lt;/p&gt;

&lt;p&gt;Se espera que durante los próximos años se realicen varias ediciones y que el número de empresas colaboradoras siga creciendo.&lt;/p&gt;</content><author><name>Javier Gonzalez</name></author><summary type="html">Conoce el programa #Include creado por la Fundación GoodJob.</summary></entry></feed>